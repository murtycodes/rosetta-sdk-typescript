/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AccountIdentifier, CoinIdentifier, Currency, NetworkIdentifier, Operator, TransactionIdentifier } from './';
/**
 * SearchTransactionsRequest is used to search for transactions matching a set of provided conditions in canonical blocks.
 * @export
 * @interface SearchTransactionsRequest
 */
export interface SearchTransactionsRequest {
    /**
     *
     * @type {NetworkIdentifier}
     * @memberof SearchTransactionsRequest
     */
    network_identifier: NetworkIdentifier;
    /**
     *
     * @type {Operator}
     * @memberof SearchTransactionsRequest
     */
    operator?: Operator;
    /**
     * max_block is the largest block index to consider when searching for transactions. If this field is not populated, the current block is considered the max_block. If you do not specify a max_block, it is possible a newly synced block will interfere with paginated transaction queries (as the offset could become invalid with newly added rows).
     * @type {number}
     * @memberof SearchTransactionsRequest
     */
    max_block?: number;
    /**
     * offset is the offset into the query result to start returning transactions. If any search conditions are changed, the query offset will change and you must restart your search iteration.
     * @type {number}
     * @memberof SearchTransactionsRequest
     */
    offset?: number;
    /**
     * limit is the maximum number of transactions to return in one call. The implementation may return <= limit transactions.
     * @type {number}
     * @memberof SearchTransactionsRequest
     */
    limit?: number;
    /**
     *
     * @type {TransactionIdentifier}
     * @memberof SearchTransactionsRequest
     */
    transaction_identifier?: TransactionIdentifier;
    /**
     *
     * @type {AccountIdentifier}
     * @memberof SearchTransactionsRequest
     */
    account_identifier?: AccountIdentifier;
    /**
     *
     * @type {CoinIdentifier}
     * @memberof SearchTransactionsRequest
     */
    coin_identifier?: CoinIdentifier;
    /**
     *
     * @type {Currency}
     * @memberof SearchTransactionsRequest
     */
    currency?: Currency;
    /**
     * status is the network-specific operation type.
     * @type {string}
     * @memberof SearchTransactionsRequest
     */
    status?: string;
    /**
     * type is the network-specific operation type.
     * @type {string}
     * @memberof SearchTransactionsRequest
     */
    type?: string;
    /**
     * address is AccountIdentifier.Address. This is used to get all transactions related to an AccountIdentifier.Address, regardless of SubAccountIdentifier.
     * @type {string}
     * @memberof SearchTransactionsRequest
     */
    address?: string;
    /**
     * success is a synthetic condition populated by parsing network-specific operation statuses (using the mapping provided in `/network/options`).
     * @type {boolean}
     * @memberof SearchTransactionsRequest
     */
    success?: boolean;
}
export declare function SearchTransactionsRequestFromJSON(json: any): SearchTransactionsRequest;
export declare function SearchTransactionsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchTransactionsRequest;
export declare function SearchTransactionsRequestToJSON(value?: SearchTransactionsRequest | null): any;
//# sourceMappingURL=SearchTransactionsRequest.d.ts.map