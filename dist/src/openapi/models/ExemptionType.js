"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExemptionTypeToJSON = exports.ExemptionTypeFromJSONTyped = exports.ExemptionTypeFromJSON = exports.ExemptionType = void 0;
/**
 * ExemptionType is used to indicate if the live balance for an account subject to a BalanceExemption could increase above, decrease below, or equal the computed balance. * greater_or_equal: The live balance may increase above or equal the computed balance. This typically   occurs with staking rewards that accrue on each block. * less_or_equal: The live balance may decrease below or equal the computed balance. This typically   occurs as balance moves from locked to spendable on a vesting account. * dynamic: The live balance may increase above, decrease below, or equal the computed balance. This   typically occurs with tokens that have a dynamic supply.
 * @export
 * @enum {string}
 */
var ExemptionType;
(function (ExemptionType) {
    ExemptionType["greater_or_equal"] = "greater_or_equal";
    ExemptionType["less_or_equal"] = "less_or_equal";
    ExemptionType["dynamic"] = "dynamic";
})(ExemptionType = exports.ExemptionType || (exports.ExemptionType = {}));
function ExemptionTypeFromJSON(json) {
    return ExemptionTypeFromJSONTyped(json, false);
}
exports.ExemptionTypeFromJSON = ExemptionTypeFromJSON;
function ExemptionTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
}
exports.ExemptionTypeFromJSONTyped = ExemptionTypeFromJSONTyped;
function ExemptionTypeToJSON(value) {
    return value;
}
exports.ExemptionTypeToJSON = ExemptionTypeToJSON;
