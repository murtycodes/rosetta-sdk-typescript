"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkApi = exports.NetworkApiController = void 0;
const models_1 = require("../models");
const runtime = __importStar(require("../runtime"));
/**
 * NetworkApi - controller interface for the server side implementation.
 *
 * @export
 * @interface NetworkApiController
 */
class NetworkApiController {
    /**
     *
     * @param service - The service that implements
     */
    constructor(service) {
        this.service = service;
    }
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     *
     *  @param req - The request object, where the body is a MetadataRequest
     */
    networkList(req) {
        return this.service.networkList((0, models_1.MetadataRequestFromJSON)(req.body)).then(models_1.NetworkListResponseToJSON);
    }
    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     *
     *  @param req - The request object, where the body is a NetworkRequest
     */
    networkOptions(req) {
        return this.service.networkOptions((0, models_1.NetworkRequestFromJSON)(req.body)).then(models_1.NetworkOptionsResponseToJSON);
    }
    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     *
     *  @param req - The request object, where the body is a NetworkRequest
     */
    networkStatus(req) {
        return this.service.networkStatus((0, models_1.NetworkRequestFromJSON)(req.body)).then(models_1.NetworkStatusResponseToJSON);
    }
}
exports.NetworkApiController = NetworkApiController;
/**
 *
 */
class NetworkApi extends runtime.BaseAPI {
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    networkListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.metadataRequest === null || requestParameters.metadataRequest === undefined) {
                throw new runtime.RequiredError('metadataRequest', 'Required parameter requestParameters.metadataRequest was null or undefined when calling networkList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/network/list`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.MetadataRequestToJSON)(requestParameters.metadataRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NetworkListResponseFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint returns a list of NetworkIdentifiers that the Rosetta server supports.
     * Get List of Available Networks
     */
    networkList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.networkListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    networkOptionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.networkRequest === null || requestParameters.networkRequest === undefined) {
                throw new runtime.RequiredError('networkRequest', 'Required parameter requestParameters.networkRequest was null or undefined when calling networkOptions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/network/options`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.NetworkRequestToJSON)(requestParameters.networkRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NetworkOptionsResponseFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint returns the version information and allowed network-specific types for a NetworkIdentifier. Any NetworkIdentifier returned by /network/list should be accessible here. Because options are retrievable in the context of a NetworkIdentifier, it is possible to define unique options for each network.
     * Get Network Options
     */
    networkOptions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.networkOptionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    networkStatusRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.networkRequest === null || requestParameters.networkRequest === undefined) {
                throw new runtime.RequiredError('networkRequest', 'Required parameter requestParameters.networkRequest was null or undefined when calling networkStatus.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/network/status`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.NetworkRequestToJSON)(requestParameters.networkRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NetworkStatusResponseFromJSON)(jsonValue));
        });
    }
    /**
     * This endpoint returns the current status of the network requested. Any NetworkIdentifier returned by /network/list should be accessible here.
     * Get Network Status
     */
    networkStatus(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.networkStatusRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.NetworkApi = NetworkApi;
