/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { MempoolResponse, MempoolTransactionRequest, MempoolTransactionResponse, NetworkRequest } from '../models';
import * as runtime from '../runtime';
export interface MempoolRequest {
    networkRequest: NetworkRequest;
}
export interface MempoolTransactionOperationRequest {
    mempoolTransactionRequest: MempoolTransactionRequest;
}
/**
 * MempoolApi - controller interface for the server side implementation.
 *
 * @export
 * @interface MempoolApiController
 */
export declare class MempoolApiController<Req extends {
    body: any;
} = {
    body: any;
}> {
    private readonly service;
    /**
     *
     * @param service - The service that implements
     */
    constructor(service: MempoolApiService);
    /**
     * Get all Transaction Identifiers in the mempool
     * Get All Mempool Transactions
     *
     *  @param req - The request object, where the body is a NetworkRequest
     */
    mempool(req: Req): Promise<any>;
    /**
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     * Get a Mempool Transaction
     *
     *  @param req - The request object, where the body is a MempoolTransactionRequest
     */
    mempoolTransaction(req: Req): Promise<any>;
}
/**
 * MempoolApi - service interface for the server side implementation.
 *
 *
 * @export
 * @interface MempoolApiService
 */
export interface MempoolApiService {
    /**
     * Get all Transaction Identifiers in the mempool
     * Get All Mempool Transactions
     *
     * requestParameters - the body of the RPC style request.
     */
    mempool(requestParameters: NetworkRequest): Promise<MempoolResponse>;
    /**
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     * Get a Mempool Transaction
     *
     * requestParameters - the body of the RPC style request.
     */
    mempoolTransaction(requestParameters: MempoolTransactionRequest): Promise<MempoolTransactionResponse>;
}
/**
 * MempoolApi - interface
 *
 * @export
 * @interface MempoolApiInterface
 */
export interface MempoolApiInterface {
    /**
     * Get all Transaction Identifiers in the mempool
     * @summary Get All Mempool Transactions
     * @param {NetworkRequest} networkRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MempoolApiInterface
     */
    mempoolRaw(requestParameters: MempoolRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolResponse>>;
    /**
     * Get all Transaction Identifiers in the mempool
     * Get All Mempool Transactions
     */
    mempool(requestParameters: MempoolRequest, initOverrides?: RequestInit): Promise<MempoolResponse>;
    /**
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     * @summary Get a Mempool Transaction
     * @param {MempoolTransactionRequest} mempoolTransactionRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MempoolApiInterface
     */
    mempoolTransactionRaw(requestParameters: MempoolTransactionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionResponse>>;
    /**
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     * Get a Mempool Transaction
     */
    mempoolTransaction(requestParameters: MempoolTransactionOperationRequest, initOverrides?: RequestInit): Promise<MempoolTransactionResponse>;
}
/**
 *
 */
export declare class MempoolApi extends runtime.BaseAPI implements MempoolApiInterface {
    /**
     * Get all Transaction Identifiers in the mempool
     * Get All Mempool Transactions
     */
    mempoolRaw(requestParameters: MempoolRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolResponse>>;
    /**
     * Get all Transaction Identifiers in the mempool
     * Get All Mempool Transactions
     */
    mempool(requestParameters: MempoolRequest, initOverrides?: RequestInit): Promise<MempoolResponse>;
    /**
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     * Get a Mempool Transaction
     */
    mempoolTransactionRaw(requestParameters: MempoolTransactionOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MempoolTransactionResponse>>;
    /**
     * Get a transaction in the mempool by its Transaction Identifier. This is a separate request than fetching a block transaction (/block/transaction) because some blockchain nodes need to know that a transaction query is for something in the mempool instead of a transaction in a block. Transactions may not be fully parsable until they are in a block (ex: may not be possible to determine the fee to pay before a transaction is executed). On this endpoint, it is ok that returned transactions are only estimates of what may actually be included in a block.
     * Get a Mempool Transaction
     */
    mempoolTransaction(requestParameters: MempoolTransactionOperationRequest, initOverrides?: RequestInit): Promise<MempoolTransactionResponse>;
}
//# sourceMappingURL=MempoolApi.d.ts.map